#!/bin/bash

# Include all of the functions that we need.
FUNCTIONS_DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$FUNCTIONS_DIR" ]]; then FUNCTIONS_DIR="$PWD"; fi
. "$FUNCTIONS_DIR/pantheon-cleanup-on-error"
. "$FUNCTIONS_DIR/pantheon-script-colours"
. "$FUNCTIONS_DIR/speak-message"
. "$FUNCTIONS_DIR/pantheon-terminus-version"

###
# Create a multi-dev.
#
# @param string $SITENAME
#   The machine name of the site.
# @param string $FRAMEWORK
#   The framework of the site.
# @param string $SUGGESTED_MULTIDEV
#   The suggested name of the multidev to create.
# @param string $MULTIDEV
#   Will be overwritten with the machine name of the multidev that was created
#   or chosen.
###
multidev_create() {
  local sitename=$1
  local framework=$2
  local sugested_multidev=$3
  local multidev=''
  local charlength=0
  local from_env_default=''
  local from_env=''
  echo -e "Creating multidev for ${framework} site ${sitename}."

  while true; do
    read -p "${UNDERLINE}What should the multidev be called? You may use the name of an existing branch. Typically includes the ticket number  e.g. Zendesk: zd1234, or Pivotal Tracker: pt123456789). [${BOLD}${sugested_multidev}${NOBOLD}]? ${NOUNDERLINE}"  multidev
    multidev="${multidev:-$sugested_multidev}"
    # Replace hash characters which are common from Pivotal Tracker IDs.
    multidev="${multidev/\#/}"

    # Validate that it's fewer than 12 chars (Pantheon's limit for multi-devs).
    charlength=${#multidev}

    if [ $charlength -lt 12 ]; then
      break;
    fi;
    >&2 echo -e "${INVERSE}Multidev name must be fewer than 12 characters.  Yours was ${charlength}.  Try again.${NOINVERSE}"
  done;

  terminus -q env:info ${sitename}.${multidev}
  if [ $? != 0 ]; then
    echo -e "Creating multidev enironment $multidev"
    from_env_default='live'
    read -p "${UNDERLINE}Use the db/files from which environment? (dev/test/${BOLD}live${NOBOLD}) ${NOUNDERLINE}"  from_env
    from_env="${from_env:-$from_env_default}"
    echo -e "${PROTIP}The git branch is created early.  If you need to use this locally, you can probably already do so."
    echo -e "Creating multidev ${multidev} from ${from_env}.  Please wait (this can take a long time)..."
    terminus multidev:create ${sitename}.${from_env} ${multidev}
    if [ $? != 0 ]; then
      >&2 echo -e "Error: Could not create multidev. Maybe the site is already at its max number of multidevs.  Check the Pantheon dashboard."
      exit 5;
    fi
    speak_message "Multidev created."
  else
    echo -e "Multidev environment $multidev already exists and will be used for the rest of the procedure."
    from_env_default='none'
    read -p "${UNDERLINE}Copy db from which environment? (dev/test/live/${BOLD}none${NOBOLD}/quit)${NOUNDERLINE} " from_env
    from_env="${from_env:-$from_env_default}"
    case $from_env in
      quit) exit 0;;
      none) ;;
      *)
        echo -e "Copying DB from ${sitename}.${from_env} to ${multidev}.  Please wait (this can take a long time)..."
        terminus -y -q env:clone-content ${sitename}.${from_env} ${multidev}
        if [ $? != 0 ]; then
          cleanup_on_error $sitename $multidev "error cloning content from ${from_env} to ${multidev}" 6
        fi
        speak_message "Database copied."
        ;;
    esac
  fi
  eval "$4='$multidev'"

  echo -e "Multidev $multidev created."
}
